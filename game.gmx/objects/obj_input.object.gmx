<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i = 0; i &lt;= 12; i+=1){ input[i] = false; input_pressed[i] = false; inputkey[i] = 0; } //inputs [0] - [12] are set to false
input_direction = -1; //used to tell controlled characters what direction to move in, -1 means no directional input 
type = 0; //0 = keyboard, 1 = gamepad

for (i = 0; i&lt;= 3; i++){ direction_input[i] = false; direction_input_pressed[i] = false; direction_input_key[i] = false; }


input_down = false;
input_down_pressed = false;
input_up = false;
input_up_pressed = false;
input_left = false;
input_left_pressed = false;
input_right = false;
input_right_pressed = false;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//LOOP FOR EVERY INPUT
for(i = 0; i &lt;= 12; i+=1){ //sets inputs [0] - [12] to their global values
     //return input_pressed[i] to zero
     input_pressed[i] = 0;
     if (is_string(global.input[i])) inputkey[i] = keyboard_check(ord(global.input[i])); //if the input is a character keyboard input
     else switch (global.input[i]){ //if input is not a char. keyboard input, define what input is based on the value
        case 1: inputkey[i] = mouse_check_button(mb_left); break;
        case 2: inputkey[i] = mouse_check_button(mb_right); break;
        case 3: inputkey[i] = mouse_wheel_up(); break;
        case 4: inputkey[i] = mouse_wheel_down(); break;
        case 5: inputkey[i] = keyboard_check(vk_shift); break;
        case 6: inputkey[i] = keyboard_check(vk_space); break;
     }
     //check if input is being input
     if (inputkey[i]){
        if (!input[i]) input_pressed[i] = 1; //if the input isnt 1 then it hasnt been pressed yet, set input_pressed to 1
        input[i] = 1;
     }
     else if (!inputkey[i]) input[i] = 0;
}
//DIRECTIONAL INPUTS
for (i = 0; i &lt;= 3; i++){
    direction_input_pressed[i] = 0;

    if(is_string(global.direction_input[i])) direction_input_key[i] = keyboard_check(ord(global.direction_input[i])); //if is a letter
    else if(i = 0) direction_input_key[i] = keyboard_check(vk_up);
    else if (i = 1) direction_input_key[i] = keyboard_check(vk_down);
    else if (i = 2) direction_input_key[i] = keyboard_check(vk_left);
    else if (i = 3) direction_input_key[i] = keyboard_check(vk_right);
    
    if (direction_input_key[i]){
        if(!direction_input[i]) direction_input_pressed[i] = 1;
        direction_input[i] = 1;
    }
    else if (!direction_input_key[i]) direction_input[i] = 0;
}

//Renames
input_down = direction_input[1];
input_down_pressed = direction_input_pressed[1];
input_up = direction_input[0];
input_up_pressed = direction_input_pressed[0];
input_left = direction_input[2];
input_left_pressed = direction_input_pressed[2];
input_right = direction_input[3];
input_right_pressed = direction_input_pressed[3];



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bulletnum = 0; //how many bullets will be fired in a round
firerate = 0; //how fast the bullets come out
shotsnum = 0; //how many shots before reload
reloadtime = 60; //how long reload will take
projectilespeed = 20; //speed of projectile
maxspread = 0; //maximum spread of shot
spread = 0;
minspread = 0; //minimum spread of shot
slow = false; //do the projectiles slow down or not
damage = 0; //damage of each bullet

//Beam weapons only
beam = false; //is the weapon a beam weapon? (laser)
arc = false; //arc off walls?

//Burst weapons only
burst = false; //is the weapon a burst weapon? (shotgun)

//Explosive weapons only
explode = false; //is the weapon an explosive weapon? (RPG)
explode_projectile_number = 0;
explode_radius = 0;
explode_damage = 0;

bulletsfired = 0;
shotsfired = 0;
reloading = false;
firing = false;
cooldown = 0;

wielder = 0; //object wielding weapon
alarm[0] = 0;

//sprite variables
sprite_index = 0;
hold_x = 0; //variables for where the player will hold the weapon
hold_y = 0;
muzzle_x = 0; //variables for where the bullets will come out
muzzle_y = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//reload complete
shotsfired = 0;
reloading = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.gamefreeze) exit; //pause
//reloading
if (shotsfired &gt;= shotsnum &amp;&amp; !reloading){
    canfire = false; //weapon cannot fire while reloading
    reloading = true;
    alarm[0] = reloadtime; //set alarm 0 to the reload time
}

//firing
if (firing &amp;&amp; !reloading &amp;&amp;!wielder.sprint){
    if (!cooldown){
        if (burst){        
            bullet_spread = angle/bulletnum; //space between each bullet is decided by the angle range of the shot/number of bullets to be 
            for(i = 0; i&lt;=bulletnum; i++){
                fire_projectile(obj_projectile,global.firedirection-(angle/2)+(i*bullet_spread),party.active.maxspeed+projectilespeed);
                bulletsfired += 1;
            }
        }
        else if (beam){
            if (arc){}
            else{}
        }
        else if (explode){}
        else{
            fire_projectile(obj_projectile,global.firedirection,party.active.maxspeed+projectilespeed);
            bulletsfired += 1;
        }
        cooldown = firerate; //set cooldown to the rate of fire
    }
    else cooldown += -1; //cooldown goes down
    if (bulletsfired &gt;= bulletnum){
        firing = false;
        shotsfired += 1;
        bulletsfired = 0;
    }   
}
else if (firing) firing = false;      

//spread
if (wielder.speed &gt;= wielder.maxspeed)
    spread = maxspread;
else if (wielder.speed = 0)
    spread = minspread;
else
    spread =  wielder.speed + minspread;
if (spread &gt; maxspread) spread = maxspread;    

//image_index will be same as wielder
image_index = wielder.image_index;

    

    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Test
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

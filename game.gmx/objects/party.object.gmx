<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Party variables
partynum = 1; //number of units in the party
member[0] = 0; member[1] = 0; member[2] = 0; member[3] = 0; //holds ids for partymembers
list[0] = 0; list[1] = 0; list[2] = 0; list[3] = 0;//permanent ids for partymembers
active = member[0]; //holds id for active partymember
swap[0] = false; swap[1] = false; swap[2] = false; swap[3] = false; //the party swapping? triggered on mouse scroll
active_member = 0; //which member is active atm (used to mousewheel swapping)

//Positioning variables
posx[0] = 0; posx[1] = 0; posx[2] = 0; posx[3] = 0; //will handle positioning of party members
posy[0] = 0; posy[1] = 0; posy[2] = 0; posy[3] = 0;
centerx = 0; centery = 0; //center of party
swapnum = 0; //partymember to swap with active (when becoming active partymember)

member[0] = instance_create(obj_playerspawn.x,obj_playerspawn.y,player); //create first member of party
member[0].control = true;
member[0].weapon1 = instance_create(0,0,weapon01);
member[0].weapon1.wielder = member[0]; //weapons will know who their wielder is
member[0].weapon2 = instance_create(0,0,weapon02);
member[0].weapon2.wielder = member[0];
member[0].current_weapon = member[0].weapon1;
list[0] = member[0];
active = member[0];

addchar = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Detect Switching - Mousewheel
if (obj_input.input_pressed[2] || obj_input.input_pressed[3]){ // mousewheel up or down
    if (obj_input.input_pressed[2]){ //scroll up
        active_member += 1; //increase active_member by one
        if (active_member &gt; partynum-1) active_member = 0;
        swap[active_member] = true;
    }
    else if (obj_input.input_pressed[3]){ //mousewheel down
        active_member += -1; //decrease active_member by one
        if (active_member &lt; 0) active_member = partynum-1;
        swap[active_member] = true;
    }
}

//Active Switch
if (swap[0]){ //switch to member 1
    if (list[0] &amp;&amp; !list[0].active){
        for (i = 0; i &lt; partynum; i += 1){ //scan through members to find which one equals list
            if (member[i] = list[0]){
                member[0].swapping = true; //swapping is set to true on the party member
                member[4] = member[0]; //member[4] is used to remember proper id of member[0]
                member[0] = member[i];
                member[i] = member[4];
                member[0].direction_memory = member[i].direction_memory; //direction firing is transferred
                member[i].active = false;
            }
        }
    }
    swap[0] = false;
}
else if (swap[1]){ //switch to member 2
    if (list[1] &amp;&amp; !list[1].active){
        for (i = 0; i &lt; partynum; i += 1){ //scan through members to find which one equals list
            if (member[i] = list[1]){
                member[0].swapping = true; //swapping is set to true on the party member
                member[4] = member[0]; //member[4] is used to remember proper id of member[0]
                member[0] = member[i];
                member[i] = member[4];
                member[0].direction_memory = member[i].direction_memory; //direction faced is transferred
                member[i].active = false;
                swap[1] = false;
            }
        }
    }
    swap[1] = false;
}
else if (swap[2]){ //switch to member 3
    if (list[2] &amp;&amp; !list[2].active){
        for (i = 0; i &lt; partynum; i += 1){ //scan through members to find which one equals list
            if (member[i] = list[2]){
                member[0].swapping = true; //swapping is set to true on the party member
                member[4] = member[0]; //member[4] is used to remember proper id of member[0]
                member[0] = member[i];
                member[i] = member[4];
                member[0].direction_memory = member[i].direction_memory;
                member[i].active = false;
                swap[2] = false;
            }
        }
    }
    swap[2] = false;
}
else if (swap[3]){ //switch to member 4
    if (list[3] &amp;&amp; !list[3].active){
        for (i = 0; i &lt; partynum; i += 1){ //scan through members to find which one equals list
            if (member[i] = list[3]){
                member[0].swapping = true; //swapping is set to true on the party member
                member[4] = member[0]; //member[4] is used to remember proper id of member[0]
                member[0] = member[i];
                member[i] = member[4];
                member[0].direction_memory = member[i].direction_memory;
                member[i].active = false;
                swap[3] = false;
            }
        }
    }
    swap[3] = false;
}


//Update positioning

    posx[0] = active.x; posy[0] = active.y
    if (active.facing) centerx = posx[0]+5; //positioning of centerx and centery
    else centerx = posx[0]-5;
    if (active.vfacing) centery = posy[0]+10;
    else centery = posy[0]-10;

    if (partynum &lt; 2){ //if there is only one in party, positions will remain in center
        posx[1] = centerx; posy[1] = centery;
        posx[2] = centerx; posy[2] = centery;
        posx[3] = centerx; posy[3] = centery;
    }   
    if (partynum == 2){ //for a party of two
        if (active.facing) posx[1] = centerx-25; //offset for position 1 based on where active is facing
        else posx[1] = centerx+25;
        if (active.vfacing) posy[1] = centery+10;
        else posy[1] = centery-10;
        
        posx[2] = centerx; posx[3] = centerx; //other positions stick to center 
        posy[2] = centery; posy[3] = centery;
    }
    else if (partynum == 3){ //party of 3
        if (active.vfacing){ //party shifts based on if player is facing up or down
            posy[1] = centery+10;
            posy[2] = centery+10;
        }
        else{
            posy[1] = centery - 10;
            posy[2] = centery - 10;
        }
        posx[1] = centerx+25;
        posx[2] = centerx-25;
        
        posx[3] = centerx; posy[3] = centery;  //position 3 will stay in center for now
    }
    else if (partynum == 4){ //party of 4
        if (active.vfacing){
            posy[1] = centery+10;
            posy[2] = centery+20;
            posy[3] = centery+10;
        }
        else{
            posy[1] = centery-10;
            posy[2] = centery-20;
            posy[3] = centery-10;
        }
        posx[1] = centerx+25;
        posx[2] = centerx;
        posx[3] = centerx-25;
    }
    
    for(i = 0; i &lt; partynum; i+=1){
        if (member[i].x-10 &gt; posx[i] || member[i].x+10 &lt; posx[i] || member[i].y-10 &gt; posy[i] || member[i].y+10 &lt; posy[i]){ //if the partymember is more than 10 away from it's position
            member[i].adjust = true;
            member[i].posx = posx[i];
            member[i].posy = posy[i];
        }
    }

//for active holdface, force all partymembers to holdface as well
if (partynum &gt; 1){
    for (i = 1; i &lt; partynum; i+=1){
        member[i].facing = active.facing
        member[i].vfacing = active.vfacing
        member[i].holdface = active.holdface
    }
}

active = member[0]; //active will always be member[0]
member[0].active = true; //member[0] will always be active

if (obj_input.input_pressed[9]){
 adparty(addchar);
 addchar += 1;
}

    
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

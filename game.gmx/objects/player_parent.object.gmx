<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Physical Attributes
direction = 270;
direction_memory = 0;
speed = 0;
collision = false;
walking = false;
frozen = false;
feetx[0] = 20; feetx[1] = 43; //for collision workaround

//Game Attributes
firedirection = direction;
hitpoints = 100;
maxspeed = 6;
sprintspeed = maxspeed * 3
immune = false;
getitem = 0;
facing = 0;
vfacing = 0;
holdface = false;
sprint = false;
control = false;
swapping = false;
proj_cooldown = 0;

//Sprite Attributes
sprite_index = player0;
image_index = 8;
image_speed = 0;
sprite_index_arms = 0;
frame_change = false;
frame = 0;
frame_countdown = 0;
xscale = 1;

//Party Attributes
active = false;
posx = 0; posy = 0; //position x and position y (for party positioning)
adjust = false;
partynum = 0;

//Weapon Attributes
weapon1 = 0; //point to id of weapon wielded
weapon2 = 0;
current_weapon = 0; //will hold id for the current weapon being used
fire_point_x = 0;
fire_point_y = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.gamefreeze) exit; //pause
depth = -(y+63);
if (!frozen){ //if the player is frozen (from a pause or other effect, it will be unable to move or do anything
    //MOVEMENT CODE
    if (active){
        //Check if keyboard is pressed
        //if(keyboard_check_pressed(vk_right) &amp;&amp; !holdface){ //right
        if (obj_input.input_right_pressed &amp;&amp; !holdface){
            if (!obj_input.input[0]&amp;&amp;!obj_input.input[1]) facing = 1; //immediately change facing to proper value
            frame_change = true; //trigger frame change
        }
        //else if (keyboard_check_pressed(vk_left) &amp;&amp; !holdface){ //left
        else if (obj_input.input_left_pressed &amp;&amp; !holdface){
            if (!obj_input.input[0]&amp;&amp;!obj_input.input[1]) facing = 0;
            frame_change = true;
        }
        //else if (keyboard_check_pressed(vk_up) &amp;&amp; !holdface){ //up 
        else if (obj_input.input_up_pressed &amp;&amp; !holdface){
            frame_change = true;
            if (!obj_input.input[0]&amp;&amp;!obj_input.input[1]) vfacing = 1;
        }
        //else if (keyboard_check_pressed(vk_down) &amp;&amp; !holdface){ //down
        else if (obj_input.input_down_pressed &amp;&amp; !holdface){
            frame_change = true;
            if (!obj_input.input[0]&amp;&amp;!obj_input.input[1]) vfacing = 0;
        }
        //down
        if(obj_input.input_down){
            if (obj_input.input_right) move(7); //move(x*45 = direction to move in)
            else if (obj_input.input_left) move(5);
            else move(6);
            if (!obj_input.input[0]&amp;&amp;!obj_input.input[1]) vfacing = 0;
        }
        //up
        else if(obj_input.input_up){
            if (obj_input.input_right) move(1);
            else if (obj_input.input_left) move(3);
            else move(2);
            if (!obj_input.input[0]&amp;&amp;!obj_input.input[1]) vfacing = 1;
        }
        //right
        else if(obj_input.input_right){
            move(8);
            if (!obj_input.input[0]&amp;&amp;!obj_input.input[1]) facing = 1;
        }
        //left
        else if(obj_input.input_left){
             move(4);
            if (!obj_input.input[0]&amp;&amp;!obj_input.input[1]) facing = 0;
        }
        else move(0);
        
        //ATTACK CODE
        if(obj_input.input_pressed[0]){
           weapon1.firing = true;
           current_weapon = weapon1;
        }
        if(obj_input.input_pressed[1]){
            weapon2.firing = true;
            current_weapon = weapon2;
        }
        if (obj_input.input_pressed[0]||obj_input.input_pressed[1]){ //only do these things when the fire button is pressed
            if (!facing) global.firedirection = point_direction(x+current_weapon.muzzle_x,y+current_weapon.muzzle_y,mouse_x,mouse_y); //mouse will aim where the bullets are fired
            else global.firedirection = point_direction(x+64-current_weapon.muzzle_x,y+current_weapon.muzzle_y,mouse_x,mouse_y); //aim for facing the other direction
            if (global.firedirection &gt;= 270 || global.firedirection &lt; 90) facing = 1; //facing and vfacing are decided by global.firedirection
            else facing = 0;
            if (global.firedirection &lt; 180) vfacing = 1;
            else vfacing = 0;
        }
        
    
    }
    else{ //if not active
        if (adjust) partyadjust();
        else move(-1);
        
        //new pathfinding code
       // if (adjust) pathfind(posx,posy);
        //else move(-1);
        
        direction_memory = party.active.direction_memory; //direction_memory will be that of the party leader
    }
    walking = speed; //var walking is true when player is moving
    //Check if shift is pressed - for sprint
    sprint = obj_input.input[4];

    
    //if (instance_position(x+feetx[0],y+63,obj_boundary) || instance_position(x+feetx[1],y+63,obj_boundary)){
        //speed = 0;
        //y += -4;
    //}
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_boundary">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// DESCRIPTION: Solves strange collision issues when landing or walking into a solid (ground or wall) for platformers
// CREDIT:  cantavanda @ gmc.yoyogames.com
// URL: http://gmc.yoyogames.com/index.php?showtopic=545531
// USE: Apply this script in Player -&gt; Collides With -&gt; Solid event
 
//CODE: 
 
if (!place_free(x+hspeed,y))
{
    if (hspeed&lt;=0){move_contact_solid(180,abs(hspeed));}
    if (hspeed&gt;0){move_contact_solid(0,abs(hspeed));}
    hspeed=0;
}
  
if (!place_free(x,y+vspeed))
{
    if (vspeed&lt;=0){move_contact_solid(90,abs(vspeed));}
    if (vspeed&gt;0){move_contact_solid(270,abs(vspeed));}
    vspeed=0;
}
 
if (!place_free(x+hspeed,y+vspeed))
{
    hspeed=0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="88">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!frozen){
    if (proj_cooldown = 0){
        if (active) fire_projectile(obj_projectile,global.firedirection,maxspeed+3);
        proj_cooldown = 5;
    }
    else proj_cooldown += -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This portion of the code handles the changing of frames
if (!global.gamefreeze){ //if the game is frozen, do not update any frames
    //if player is standing still draw according to what direction he would be facing
    if(!walking){
        if(facing){
            if (vfacing){
                image_index = 11;
            }
            else{ 
                image_index = 8;
            }
        }
        else{
            if (vfacing){
                image_index = 3;
            }
            else{ 
                image_index = 0;
            }
        }
    } 
    //if player is walking 
    else{
        if (frame_countdown &lt;= 0) frame_change = true; //frame_change will trigger when frame_countdown reaches zero
        if (frame_change == true){
            playerframe(facing);
            frame_countdown = 15 - speed - path_speed; //speed of frames matches speed of player
            if (frame_countdown &lt; 3) frame_countdown = 3 //frame countdown cant fall below 2
            frame_change = false;
        }
    }
    frame_countdown += -1;
}
if (vfacing){
    draw_sprite(current_weapon.sprite_index,image_index,x,y);
}
//draw body
draw_sprite(sprite_index,image_index,x,y);
//draw weapon
if (!vfacing){
    draw_sprite(current_weapon.sprite_index,image_index,x,y);
}
//draw arms
draw_sprite(sprite_index_arms,image_index,x,y);
draw_set_font(font0)
//if (active) draw_set_color(c_yellow) else draw_set_color(c_white)
//draw_text(x+32,y-10,string(partynum+1));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
